using BackEndForJawla1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Options;
using System.IO;
using NetTopologySuite.Geometries;

namespace BackEndForJawla1.Data
{
    public class MyDbContext : DbContext
    {
        public MyDbContext(DbContextOptions<MyDbContext> options) : base(options)
        {


        }

        public DbSet<routes> routes { get; set; }
        public DbSet<busRouteStop> routeStops { get; set; }
        public DbSet<bucketInfo> bucketInfo { get; set; }
        public DbSet<user> user { get; set; }
        public DbSet<stopsgeojson> stopsgeojson { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                var configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json")
                    .Build();

                var connectionString = configuration.GetConnectionString("MyPostgresConnection");

                optionsBuilder.UseNpgsql(connectionString, options =>
                {
                    options.MigrationsHistoryTable("__EFMigrationsHistory", "busNetwork");
                    options.MigrationsHistoryTable("__UserMigrationsHistory", "user");
                });

            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDefaultSchema("busNetwork");

            modelBuilder.Entity<routes>().ToTable("routes", "busNetwork");
            modelBuilder.Entity<bucketInfo>().ToTable("bucketInfo", "busNetwork");
            modelBuilder.Entity<stopsgeojson>().ToTable("stopsgeojson", "busNetwork");
            modelBuilder.Entity<busRouteStop>().ToTable("busRouteStop", "busNetwork");
            modelBuilder.Entity<user>().ToTable("user", "user");

            modelBuilder.Entity<stopsgeojson>()
        .Property(e => e.geom)
        .HasColumnType("geometry(Point, 4326)")
        .HasConversion(
            v => v.AsText(), // Convert Point to WKT string
            v => new NetTopologySuite.IO.WKTReader().Read(v) as Point);


            modelBuilder.Entity<user>()
                .Property(u => u.userID)
                .ValueGeneratedOnAdd(); // Auto-generated by the database

        }

        

    }
}
